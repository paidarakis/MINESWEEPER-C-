#include <iostream>
#include <vector>
#include <cstdlib>
#include <ctime>
#include <string>
#include <windows.h>
using namespace std;

// Διαστάσεις πίνακα και αριθμός ναρκών
const int seires = 9;
const int stiles = 9;
const int narkescount = 10;

// Πίνακες κατάστασης του παιχνιδιού
vector<vector<char>> board(seires, vector<char>(stiles, '-'));          // Πίνακας προβολής (ό,τι βλέπει ο παίκτης)
vector<vector<bool>> revealed(seires, vector<bool>(stiles, false));    // Αν έχει αποκαλυφθεί ένα κελί
vector<vector<bool>> narkes(seires, vector<bool>(stiles, false));      // Πού υπάρχουν νάρκες
vector<vector<bool>> flagged(seires, vector<bool>(stiles, false));     // Πού έχουν τοποθετηθεί σημαίες

// Μεταβλητές στατιστικών
int apnarkes = 0;       // Πόσα κελιά έχουν αποκαλυφθεί
int kelsim = 0;         // Πόσα κελιά έχουν σημαίες
int ypnarkes = narkescount;  // Πόσες νάρκες απομένουν (υπολογισμός με βάση σημαίες)
bool firstClick = true; // Για να τοποθετηθούν οι νάρκες μετά το πρώτο click

// Καθαρίζει την οθόνη
void clearScreen() {
    system("cls");
}

// Εμφανίζει το αρχικό μήνυμα καλωσορίσματος
void printMessage() {
    cout << "\t\t" << "----------------------------\n";
    cout << "\t\t" << "  Welcome to MINESWEEPER!  \n";
    cout << "\t\t" << "----------------------------\n";
    cout << "\n";
    cout << "Stoxos: Apokalypste ola ta tetragwna pou den exoun narkh.\n";
    cout << "Prosoxh: Kanontas click se narkh teleiwnei to paixnidi.\n" << endl;
}

// Έλεγχος αν οι συντεταγμένες είναι εντός ορίων
bool inBounds(int r, int c) {
    return r >= 0 && r < seires && c >= 0 && c < stiles;
}

// Υπολογίζει πόσες νάρκες υπάρχουν γύρω από το κελί
int countAdjacentMines(int r, int c) {
    int count = 0;
    for(int dr = -1; dr <= 1; ++dr)
        for(int dc = -1; dc <= 1; ++dc)
            if(inBounds(r + dr, c + dc) && narkes[r + dr][c + dc])
                ++count;
    return count;
}

//Apokaluptei ena keli kai Αποκαλύπτει ένα κελί και αναδρομικά γειτονικά αν δεν έχει νάρκες δίπλα
void keli(int r, int c){
    if (!inBounds(r, c) || revealed[r][c] || flagged[r][c]) return;

    revealed[r][c] = true;
    apnarkes++;

    int mineCount = countAdjacentMines(r, c);

    if(mineCount > 0){
        board[r][c] = '0' + mineCount;
    }else{
        board[r][c] = ' ';
    }

    if(mineCount == 0){
        for(int dr = -1; dr <= 1; ++dr)
            for(int dc = -1; dc <= 1; ++dc)
                keli(r + dr, c + dc);
    }
}
// Topothetei tuxaia tis narkes, ektos tou prwtou click kai girw perioxis
void plnarkes(int firstClickR, int firstClickC) {
    srand(time(0));
    int placed = 0;
    while(placed < narkescount){
        int r = rand() % seires;
        int c = rand() % stiles;
        if (!narkes[r][c] && !(abs(r - firstClickR) <= 1 && abs(c - firstClickC) <= 1)) {
            narkes[r][c] = true;
            ++placed;
        }
    }
}

// Emfanizei ton pinaka tou paixnidiou
void printBoard(bool revealAll = false) {
    cout << "   ";
    for(int c = 0; c < stiles; ++c) cout << c << ' ';
    cout << '\n';

    for (int r = 0; r < seires; ++r) {
        cout << r << " |";
        for (int c = 0; c < stiles; ++c) {
            if (revealAll && narkes[r][c])
                cout << '*';              // Emfanisi narks
            else if (flagged[r][c])
                cout << 'F';              // Simaia
            else if (revealed[r][c])
                cout << board[r][c];      // Periexomeno keliou
            else
                cout << '-';              // Kleisto keli
            cout << ' ';
        }
        cout << '\n';
    }
    cout << "\nNarkes pou apokalypthkan: " << apnarkes << "  Kelia me shmaia: " << kelsim << "  Ypoleipomenes narkes: " << ypnarkes << '\n';
}

// Elegxei an exei kerdisei o paiktis
bool isWin() {
    int revealedNonMines = 0;
    for(int r=0;r<seires;++r) {
        for (int c=0;c<stiles;++c) {
            if (revealed[r][c] && !narkes[r][c]) {
                ++revealedNonMines;
            }
        }
    }
    return revealedNonMines == seires * stiles - narkescount;
}

// Epanaferei tin katastasi tou paixnidiou
void resetGame() {
    for (int r=0;r<seires;++r){
        for (int c=0;c<stiles;++c) {
            board[r][c] = '-';
            revealed[r][c] = false;
            narkes[r][c] = false;
            flagged[r][c] = false;
        }
    }

    apnarkes = 0;
    kelsim = 0;
    ypnarkes = narkescount;
    firstClick = true;
}

// Simeio eisodou tou programmatos
int main() {
    printMessage(); // Emfanisi kalosorismatos

    while(true){
        resetGame(); // Nea arxi

        while(true){
            printBoard();

            char action;
            int r, c;
            cout << "Eisagete energeia (r gia reveal, f gia flag, u gia unflag) kai suntetagmenes (p.x., r 3 5): ";
            cin >> action >> r >> c;

            // Proto click: topothetountai oi narkes
            if(firstClick){
                if(action != 'r'){
                    cout << "You must reveal a cell on your first turn.\n" << endl;
                    continue;
                }
                plnarkes(r, c);
                firstClick = false;
            }

            if(!inBounds(r, c)){
                cout << "Lathos stoixeia.\n" << endl;
                continue;
            }

            // Energeies paikti
            if(action == 'r') {
                if(flagged[r][c]){
                    cout << "Den mporei na apokalyftei ena flagged tetragwno. Bgalte thn shmaia prwta.\n" << endl;
                    continue;
                }
                if(narkes[r][c]){
                    clearScreen();
                    printBoard(true);
                    cout << "Exases :(\n";
                    break;
                }
                keli(r, c); // Apokalupsi
            } else if(action == 'f') {
                if(revealed[r][c]) {
                    cout << "Den mporeis na baleis shmaia se mia perioxh pou exei hdh apokaluftei.\n" << endl;
                    continue;
                }
                if(!flagged[r][c]){
                    flagged[r][c] = true;
                    kelsim++;
                    ypnarkes--;
                }
            } else if(action == 'u') {
                if (flagged[r][c]) {
                    flagged[r][c] = false;
                    kelsim--;
                    ypnarkes++;
                }
            } else {
                cout << "Lathos epilogh. Xrhshmopoihse 'r', 'f', h 'u'.\n" << endl;
                continue;
            }

            // Elegxos nikis
            if(isWin()){
                clearScreen();
                printBoard(true);
                cout << "Kerdises!\n" << endl;
                break;
            }
        }

        // Paikse xana?
        char playagain;
        cout << "Thelete na paiksete pali? (y/n): ";
        cin >> playagain;

        if(playagain == 'n' || playagain == 'N'){
            break;
        } else if(playagain == 'y' || playagain == 'Y'){
            clearScreen();
            printMessage();
        } else {
            cout << "Parakalw dwste mia apo tis epiloges (y/n)." << endl;
        }
    }

    return 0;
}
